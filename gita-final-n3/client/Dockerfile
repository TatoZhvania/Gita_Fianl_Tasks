# პირველ სტეიჯში ვიყენებ Node.js 18-ის ალპაინ ვერსიას, რათა კონტეინერი იყოს მსუბუქი და სწრაფი
FROM node:18-alpine as builder

# ვქმნი სამუშაო დირექტორიას `/app`, სადაც ჩემი აპლიკაცია იმუშავებს
WORKDIR /app

# ვაკოპირებ `package.json` და `package-lock.json` ფაილებს

# ვამუშავებ `npm install`, რათა ყველა საჭირო პაკეტი ჩაიტვირთოს
RUN npm install

# ვაკოპირებ ყველა ფაილს სამუშაო დირექტორიაში, რათა პროექტის კოდი სრულად ჩაიტვირთოს
COPY . .

# ვამუშავებ `npm run build`, რათა შევქმნა კომპილირებული/ოპტიმიზირებული ფაილები
RUN npm run build

# ვიწყებ ახალი სტეიჯიდან, სადაც ვიყენებ Nginx-ს როგორც სერვერს
FROM nginx

# ვაკოპირებ მხოლოდ `dist` დირექტორიაში არსებულ გაშვებისათვის მზად ფაილებს Nginx-ის სტანდარტულ დირექტორიაში
COPY --from=builder /app/dist /usr/share/nginx/html

# ვუშვებ Nginx-ს წინა პლანზე (foreground mode), რათა კონტეინერმა არ შეწყვიტოს მუშაობა
CMD ["nginx", "-g", "daemon off;"]
